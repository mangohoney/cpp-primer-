C++ primer 第一次可以跳着看。关键是要尽快用起来，在使用中熟练，而不是在细节中迷失。
以C++ Primer第五版为例，第一遍读的时候：
Part1也就是前七章，除了6.6，6.7节，都要通读。尤其是第三章初步介绍了vector和string，简直就是新手福音，搞定这两个容器就能写一些简单的程序。
Part2基本就是数据结构和算法，如果有基础读起来很轻松。
9，11两章介绍的容器，以及12.1节的智能指针要通读。
多用智能指针和容器，远离segment fault. 
第10章里的泛型算法可以慢慢读，读完以后可以写出高逼格的函数式风格C++。
12.2节讲了怎么用new和delete分配空间，题主作为新手，知道这种写法就行，写程序时尽量用容器代替原始数组，尤其是代码里最好不要有delete。
Part3是块硬骨头，标题就是Tools for Class Authors. 作为一个"class user"，有些部分第一次是可以略过的。
13章很重要，要细读。初始化，复制，赋值，右值引用是C++里很微妙很重要的部分，别的语言对于这些概念很少有区分得这么细的。这一章不但要精读，还要完全掌握。
14章的操作符重载第一次可以观其大略；14.9节第一次可以跳过。
15章讲OOP，重要性不言而喻。如果之前一点概念都没有，学起来会觉得比较抽象。网上关于OOP有很多通俗有趣的文章，可以一起看看。
16章讲泛型编程，第一次读16.1节，掌握最基本的函数模板和类模板就行了。
Part4就更高档了，很多内容第一次就算啃下来，长久不用又忘了。第一次读推荐把18.2节读懂，命名空间简单易用效果好。别的内容可以观其大略，用时再看。
17.1节的tuple是个有趣的东东，可以读一读。17.3节的正则表达式和17.4节的随机数也许有用，也可以读一读。如果需要读写文件，要读一下17.5.2节的raw I/O和17.5.3节的random I/O。
最后给题主的建议是，写C++，要尽量避免C的写法。用static_cast而不是括号转换符；用vector而不是C里面的数组；用string而不是char *；用智能指针而不是原始指针。当然I/O是个例外，printf()还是比cout好用的；转换数字和字符串时sprintf()也比stringstream快




如果说你学 C++ 的时候，没有学到 C++ 那部分“无论什么语言都会很有帮助”的那部分，那算是白学了：
1. 资源所有权（shared_ptr/unique_ptr/observer_ptr），RAII（finally/using/defer）
2. 泛型（你会发现很多语言所谓的“泛型”都是 C++ 模板的阉割版本）
3. 优化往往要求对编译器优化、对象模型、操作系统与组成原理有很多了解
4. 内存管理（内存池之类）
5. 数据结构 & 算法（STL）（没用过 C++ 刷 OJ？）
6. 你想学明白 C++ 必然要用它写过各种不同领域的玩意吧，不写东西怎么算会？包括但不限于服务器、图形、编译器、GUI 程序、基本库等。
所以说，学明白 C++ 根本就不可能只学到那点破烂语法。我就不相信我说的这些你都熟悉找不到工作。最重要的，学 C++ 还能学到语言设计的反面典型，多好


    作为一名coder，需要能耐得住寂寞，而不是内向。现在的计算机行业早已不是两千年的个人英雄主义时代：一个人写一个软件一夜成名。现在的一个项目或产品往往需要一个团队通力合作去完成，PM（产品经理）、RD（Coder）、QA（测试）、OP（运维）之间会有反复的沟通、交互甚至是对抗，一名RD需要和PM沟通产品和项目需求，了解PM的真实意图，从一个RD的角度为产品把关；需要和QA沟通，建议QA哪些功能点需要重点测试，需要从哪些角度测试更合适；需要和OP沟通，告诉OP这个程序应该如何部署，对于机器性能的消耗有哪些，建议重点监控哪些地方。这些都需要RD良好的表达能力和沟通能力。楼主如果不仅性格不开放，而且表达和沟通能力也欠缺的话，建议以后有意识的加强提高，而不是通过选择coder这个行业去规避。
    那么什么样的性格适合做一名coder呢，个人认为最好的答案是热爱，能通过coding产生自我认同和成就感。如果你一接触编程就爱的无可自拔，那么恭喜你找到真爱。但是人们往往很容易知道自己很讨厌什么，却很难知道自己很喜欢什么，并且很多人在学习新知识的时候有畏难心理，只有达到一定高度和深度的时候，才能产生优越感和成就感，所以有必要通过一些性格特点来判断自己适不适合做coder，个人列举了以下几点，欢迎大家补充：要耐得住寂寞，能一天十几个小时坐在电脑前；要有良好的逻辑思维能力，否则会被很多BUG缠绕；要有良好的学习能力，计算机技术更新速度很快，需要我们不断的学习；要有一个好身体，长期加班坐着，身体会每况愈下。
    选一名coder后，学习什么语言合适？
       如果楼主的C++功底比较薄弱，个人建议还是不要将C++作为入门语言，出于两个原因考虑：
    一是 C++的门槛相比于Java、C#等纯面向对象的语言而言，要更难一些。难在语法和规则更复杂，也难在C++需要我们自己管理内存，需要对操作系统的内存分配和管理机制有一定的了解。
    二是感觉咱们国内，尤其是互联网行业对于C++的需求量没那么大。而且C++更倾向于在Linux服务端做后台的服务，这无疑是编程新手短时间不能出成绩的地方，所以选择C++可能面临更大的就业压力。       
那么其他语言呢？现在的互联网行业很火，互联网涉及到的主流语言是Java，可以做web开发，也可以做app开发，成熟的面向对象机制，丰富的库资源，友好的学习曲线，就业需求量也很大。
选择一门语言后，学到什么程度才能找工作？       
    我们首先要区分两个概念，找到工作和能工作是两回事，社招的岗位一般要求应聘者进来就能工作，而校招的岗位一般要求应聘者有良好的基础，经过初期的培训之后能胜任简单的工作，之后再一步步达到能胜任岗位的目标。楼主应该属于后者，我就职于BAT，仅就BAT并且是我身边的岗位对于校招的要求发表看法，抛开所有学历、学位和学校等级，就编程语言而言，语言关一定要过，不是说要把C++ Prime通读消化掉，但至少要能在理解业务逻辑的基础上读懂代码，有少量不懂的地方也可以通过搜索或查阅工具书快速的掌握。
    那是不是只要掌握好语言就够了？答案是NO。      
    纵向来看，语言是外功，数据结构和算法是内功，内外兼修才是正道，算法导论的前几章最好要掌握，包括基础的算法复杂度的概念、排序算法、递归式、栈、队列、链表、二叉树、散列表等等，后续的高级数据结构和图算法可以按照兴趣和工作需要去掌握，另外，算法导论要求有概率论、线性代数的基础知识，如果有微积分的基础知识就更赞了。       
    横向来看，编程语言依赖于操作系统，如果使用C/C++语言，做PC端的Windows研发可能需要掌握MFC、Windows API等，做服务端的Linux开发可能需要掌握Linux API、Shell等。编程语言处理的数据需要存储，就需要掌握数据库技术（SqlServer、Mysql、Oracle、甚至是Hadoop和Spark等），如果是网络产品，不可避免的会涉及到网络编程（socket、网络协议等），网络编程往往还伴随着多线程甚至是多进程和分布式的要求，这就需要我们掌握多线程、多进程和分布式编程的技术，上述这些在工作中可能会部分或者全部涉及到，但一定不会是在工作中涉及到的全部，庆幸的是对于初学者而言，不需要全部掌握才能开始工作，我建议最好都懂一些基础，知道这些概念是怎么回事、在什么情况下适合用什么技术，用到的时候再去深入掌握即可